/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package View;

import Model.InstrumentMusic;
import Model.MusicTrack;
import Model.LyricMusic;
import com.formdev.flatlaf.FlatDarkLaf;
import com.formdev.flatlaf.FlatLightLaf;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;

import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;

import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author PC
 */
public class MainUI extends javax.swing.JFrame {

    private ArrayList<MusicTrack> songs;
    private ArrayList<InstrumentMusic> insSongs = new ArrayList<>();
    private ArrayList<LyricMusic> lySongs = new ArrayList<>();

    public MainUI() {
        songs = new ArrayList<>();
        loadFile();
        initComponents();
        setLocationRelativeTo(null);
        fillTable(songs);
        classify();
        try {
                       UIManager.setLookAndFeel(new FlatDarkLaf());
                   } catch (UnsupportedLookAndFeelException ex) {
                      Logger.getLogger(MainUIbackround.class.getName()).log(Level.SEVERE, null, ex);
                   }
        setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
        addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                // Confirm exit action
                int response = JOptionPane.showConfirmDialog(null, "Do you really want to exit?", "Confirm Exit", JOptionPane.YES_NO_OPTION);
                if (response == JOptionPane.YES_OPTION) {
                    System.exit(0);
                }
            }
        });

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        title = new javax.swing.JLabel();
        menu = new javax.swing.JPanel();
        homeButton = new javax.swing.JButton();
        instrumentmusicBotton = new javax.swing.JButton();
        lyricBotton = new javax.swing.JButton();
        aboutButton = new javax.swing.JButton();
        homeTab = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        songList = new javax.swing.JTable();
        songSearch = new javax.swing.JPanel();
        songSearchButton = new javax.swing.JButton();
        songField = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        songPlayB = new javax.swing.JButton();
        addSongB = new javax.swing.JButton();
        deleteSongB = new javax.swing.JButton();
        favTab = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        favtable = new javax.swing.JTable();
        songSearch1 = new javax.swing.JPanel();
        songSearchButton1 = new javax.swing.JButton();
        songField1 = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        songPlayB1 = new javax.swing.JButton();
        addSongB1 = new javax.swing.JButton();
        deleteSongB1 = new javax.swing.JButton();
        insTab = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        insTable = new javax.swing.JTable();
        insSearch = new javax.swing.JPanel();
        insSearchButton = new javax.swing.JButton();
        insSearchText = new javax.swing.JTextField();
        insRefesh = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        insPlayB = new javax.swing.JButton();
        insDelete = new javax.swing.JButton();
        lyTab = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        lytable = new javax.swing.JTable();
        lySearch = new javax.swing.JPanel();
        lySearchB = new javax.swing.JButton();
        lySearchT = new javax.swing.JTextField();
        lyRefesh = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        lyPlayB = new javax.swing.JButton();
        lyDelete = new javax.swing.JButton();
        aboutTab = new javax.swing.JPanel();
        jTextArea1 = new javax.swing.JTextArea();
        jPanel5 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Admin");
        getContentPane().setLayout(new java.awt.GridBagLayout());

        title.setBackground(new java.awt.Color(0, 255, 0));
        title.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        title.setForeground(new java.awt.Color(0, 153, 153));
        title.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        title.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/icon/logo.png"))); // NOI18N
        title.setText("My Music");
        title.setToolTipText("");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(15, 15, 15, 15);
        getContentPane().add(title, gridBagConstraints);

        menu.setBackground(new java.awt.Color(0, 153, 153));
        menu.setForeground(new java.awt.Color(255, 255, 255));
        menu.setLayout(new java.awt.GridBagLayout());

        homeButton.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        homeButton.setText("Home");
        homeButton.setPreferredSize(new java.awt.Dimension(150, 50));
        homeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                homeButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(9, 16, 0, 14);
        menu.add(homeButton, gridBagConstraints);

        instrumentmusicBotton.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        instrumentmusicBotton.setText("Instrument Music");
        instrumentmusicBotton.setPreferredSize(new java.awt.Dimension(150, 50));
        instrumentmusicBotton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                instrumentmusicBottonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(9, 16, 0, 14);
        menu.add(instrumentmusicBotton, gridBagConstraints);

        lyricBotton.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lyricBotton.setText("Lyric Music");
        lyricBotton.setPreferredSize(new java.awt.Dimension(150, 50));
        lyricBotton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lyricBottonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.insets = new java.awt.Insets(9, 16, 0, 14);
        menu.add(lyricBotton, gridBagConstraints);

        aboutButton.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        aboutButton.setText("About");
        aboutButton.setPreferredSize(new java.awt.Dimension(150, 50));
        aboutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.insets = new java.awt.Insets(9, 16, 0, 14);
        menu.add(aboutButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.gridheight = 9;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 1;
        gridBagConstraints.ipady = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        getContentPane().add(menu, gridBagConstraints);

        homeTab.setLayout(new java.awt.GridBagLayout());

        songList.setBackground(new java.awt.Color(236, 233, 213));
        songList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title", "Author", "Genre", "Year"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        songList.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(songList);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 10);
        homeTab.add(jScrollPane2, gridBagConstraints);

        songSearch.setLayout(new java.awt.GridBagLayout());

        songSearchButton.setText("Search");
        songSearchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                songSearchButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        songSearch.add(songSearchButton, gridBagConstraints);

        songField.setPreferredSize(new java.awt.Dimension(250, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 5, 15);
        songSearch.add(songField, gridBagConstraints);

        jButton1.setText("Refresh");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        songSearch.add(jButton1, new java.awt.GridBagConstraints());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 4;
        homeTab.add(songSearch, gridBagConstraints);

        jPanel1.setLayout(new java.awt.GridBagLayout());

        songPlayB.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        songPlayB.setText("Play");
        songPlayB.setToolTipText("");
        songPlayB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                songPlayBActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 20, 10);
        jPanel1.add(songPlayB, gridBagConstraints);

        addSongB.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        addSongB.setText("Add Song");
        addSongB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addSongBActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 20, 10);
        jPanel1.add(addSongB, gridBagConstraints);

        deleteSongB.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        deleteSongB.setText("Delete ");
        deleteSongB.setToolTipText("");
        deleteSongB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteSongBActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 20, 10);
        jPanel1.add(deleteSongB, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 4;
        homeTab.add(jPanel1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.gridheight = 8;
        getContentPane().add(homeTab, gridBagConstraints);

        favTab.setLayout(new java.awt.GridBagLayout());

        favtable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title", "Author", "Genre", "Year"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        favtable.getTableHeader().setReorderingAllowed(false);
        jScrollPane3.setViewportView(favtable);
        if (favtable.getColumnModel().getColumnCount() > 0) {
            favtable.getColumnModel().getColumn(3).setResizable(false);
        }

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 10);
        favTab.add(jScrollPane3, gridBagConstraints);

        songSearch1.setLayout(new java.awt.GridBagLayout());

        songSearchButton1.setText("Search");
        songSearchButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                songSearchButton1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        songSearch1.add(songSearchButton1, gridBagConstraints);

        songField1.setPreferredSize(new java.awt.Dimension(250, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 5, 15);
        songSearch1.add(songField1, gridBagConstraints);

        jButton2.setText("Refresh");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        songSearch1.add(jButton2, new java.awt.GridBagConstraints());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 4;
        favTab.add(songSearch1, gridBagConstraints);

        jPanel2.setLayout(new java.awt.GridBagLayout());

        songPlayB1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        songPlayB1.setText("Play");
        songPlayB1.setToolTipText("");
        songPlayB1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                songPlayB1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 20, 10);
        jPanel2.add(songPlayB1, gridBagConstraints);

        addSongB1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        addSongB1.setText("Add Song");
        addSongB1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addSongB1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 20, 10);
        jPanel2.add(addSongB1, gridBagConstraints);

        deleteSongB1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        deleteSongB1.setText("Delete ");
        deleteSongB1.setToolTipText("");
        deleteSongB1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteSongB1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 20, 10);
        jPanel2.add(deleteSongB1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 4;
        favTab.add(jPanel2, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.gridheight = 5;
        getContentPane().add(favTab, gridBagConstraints);

        insTab.setLayout(new java.awt.GridBagLayout());

        insTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Title", "Author", "Genre", "Year", "Artist", "Instrument"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        insTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane4.setViewportView(insTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 10);
        insTab.add(jScrollPane4, gridBagConstraints);

        insSearch.setLayout(new java.awt.GridBagLayout());

        insSearchButton.setText("Search");
        insSearchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insSearchButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        insSearch.add(insSearchButton, gridBagConstraints);

        insSearchText.setPreferredSize(new java.awt.Dimension(250, 22));
        insSearchText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insSearchTextActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 5, 15);
        insSearch.add(insSearchText, gridBagConstraints);

        insRefesh.setText("Refresh");
        insRefesh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insRefeshActionPerformed(evt);
            }
        });
        insSearch.add(insRefesh, new java.awt.GridBagConstraints());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 4;
        insTab.add(insSearch, gridBagConstraints);

        jPanel3.setLayout(new java.awt.GridBagLayout());

        insPlayB.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        insPlayB.setText("Play");
        insPlayB.setToolTipText("");
        insPlayB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insPlayBActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 20, 10);
        jPanel3.add(insPlayB, gridBagConstraints);

        insDelete.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        insDelete.setText("Delete ");
        insDelete.setToolTipText("");
        insDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insDeleteActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 20, 10);
        jPanel3.add(insDelete, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 4;
        insTab.add(jPanel3, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.gridheight = 5;
        getContentPane().add(insTab, gridBagConstraints);

        lyTab.setLayout(new java.awt.GridBagLayout());

        lytable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Title", "Author", "Genre", "Year", "Singer"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        lytable.getTableHeader().setReorderingAllowed(false);
        jScrollPane5.setViewportView(lytable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 10);
        lyTab.add(jScrollPane5, gridBagConstraints);

        lySearch.setLayout(new java.awt.GridBagLayout());

        lySearchB.setText("Search");
        lySearchB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lySearchBActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        lySearch.add(lySearchB, gridBagConstraints);

        lySearchT.setPreferredSize(new java.awt.Dimension(250, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 5, 15);
        lySearch.add(lySearchT, gridBagConstraints);

        lyRefesh.setText("Refresh");
        lyRefesh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lyRefeshActionPerformed(evt);
            }
        });
        lySearch.add(lyRefesh, new java.awt.GridBagConstraints());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 4;
        lyTab.add(lySearch, gridBagConstraints);

        jPanel4.setLayout(new java.awt.GridBagLayout());

        lyPlayB.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lyPlayB.setText("Play");
        lyPlayB.setToolTipText("");
        lyPlayB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lyPlayBActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 20, 10);
        jPanel4.add(lyPlayB, gridBagConstraints);

        lyDelete.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lyDelete.setText("Delete ");
        lyDelete.setToolTipText("");
        lyDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lyDeleteActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 20, 10);
        jPanel4.add(lyDelete, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 4;
        lyTab.add(jPanel4, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.gridheight = 5;
        getContentPane().add(lyTab, gridBagConstraints);

        aboutTab.setLayout(new java.awt.GridBagLayout());

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jTextArea1.setText("Information at......");
        jTextArea1.setMaximumSize(new java.awt.Dimension(80, 20));
        jTextArea1.setMinimumSize(new java.awt.Dimension(80, 20));
        jTextArea1.setPreferredSize(new java.awt.Dimension(452, 450));
        aboutTab.add(jTextArea1, new java.awt.GridBagConstraints());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.gridheight = 5;
        getContentPane().add(aboutTab, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 5;
        getContentPane().add(jPanel5, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void homeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_homeButtonActionPerformed
        homeTab.setVisible(true);
        favTab.setVisible(false);
        insTab.setVisible(false);
        lyTab.setVisible(false);
        aboutTab.setVisible(false);
        fillTable(songs);
    }//GEN-LAST:event_homeButtonActionPerformed

    private void songSearchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_songSearchButtonActionPerformed
        String searchtext = songField.getText();
        fillTable(searchSong(searchtext));

    }//GEN-LAST:event_songSearchButtonActionPerformed

    private void addSongBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addSongBActionPerformed
        new AddNewMusic(songs).setVisible(true);
    }//GEN-LAST:event_addSongBActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        fillTable(songs);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void songPlayBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_songPlayBActionPerformed
        if (songList.getSelectedRow() == -1) {
            JOptionPane.showMessageDialog(this, "Please select a song to play", "Message", 1);
        } else {
            MusicTrack song = songs.get(songList.getSelectedRow());
            MusicPlayerFrame player = new MusicPlayerFrame(song);
            player.setVisible(true);
            player.setLocationRelativeTo(this);

        }
    }//GEN-LAST:event_songPlayBActionPerformed

    private void deleteSongBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteSongBActionPerformed

        if (songList.getSelectedRow() != -1) {
            int option = JOptionPane.showConfirmDialog(this, "Do you want to delete the song: " + songs.get(songList.getSelectedRow()).getTitle(), "Confirm", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (option == JOptionPane.YES_OPTION) {
                songs.remove(songList.getSelectedRow());
            }
        }
        fillTable(songs);
        saveToFile();
    }//GEN-LAST:event_deleteSongBActionPerformed

    private void songSearchButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_songSearchButton1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_songSearchButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    private void songPlayB1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_songPlayB1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_songPlayB1ActionPerformed

    private void addSongB1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addSongB1ActionPerformed
        
        
        
        
    }//GEN-LAST:event_addSongB1ActionPerformed

    private void deleteSongB1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteSongB1ActionPerformed
    }//GEN-LAST:event_deleteSongB1ActionPerformed

    private void instrumentmusicBottonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_instrumentmusicBottonActionPerformed
        homeTab.setVisible(false);
        favTab.setVisible(false);
        insTab.setVisible(true);
        lyTab.setVisible(false);
        aboutTab.setVisible(false);
        fillinsTable(insSongs);
    }//GEN-LAST:event_instrumentmusicBottonActionPerformed

    private void insSearchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insSearchButtonActionPerformed
        String searchtext = insSearchText.getText();
        fillinsTable(searchInsSong(searchtext));
    }//GEN-LAST:event_insSearchButtonActionPerformed

    private void insRefeshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insRefeshActionPerformed
        fillinsTable(insSongs);
    }//GEN-LAST:event_insRefeshActionPerformed

    private void insPlayBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insPlayBActionPerformed
        if (insTable.getSelectedRow() == -1) {
            JOptionPane.showMessageDialog(this, "Please select a song to play", "Message", 1);
        } else {
            MusicTrack song = insSongs.get(insTable.getSelectedRow());
            MusicPlayerFrame player = new MusicPlayerFrame(song);
            player.setVisible(true);
            player.setLocationRelativeTo(this);

        }
    }//GEN-LAST:event_insPlayBActionPerformed

    private void insDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insDeleteActionPerformed
        if (insTable.getSelectedRow() != -1) {
            int option = JOptionPane.showConfirmDialog(this, "Do you want to delete the song: " + insSongs.get(insTable.getSelectedRow()).getTitle(), "Confirm", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (option == JOptionPane.YES_OPTION) {
                insSongs.remove(insTable.getSelectedRow());
            }
        }
        fillinsTable(insSongs);
    }//GEN-LAST:event_insDeleteActionPerformed

    private void lySearchBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lySearchBActionPerformed
        String searchtext = lySearchT.getText();
        filllyTable(searchLySong(searchtext));
    }//GEN-LAST:event_lySearchBActionPerformed

    private void lyRefeshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lyRefeshActionPerformed
        filllyTable(lySongs);
    }//GEN-LAST:event_lyRefeshActionPerformed

    private void lyPlayBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lyPlayBActionPerformed
        if (lytable.getSelectedRow() == -1) {
            JOptionPane.showMessageDialog(this, "Please select a song to play", "Message", 1);
        } else {
            MusicTrack song = lySongs.get(lytable.getSelectedRow());
            MusicPlayerFrame player = new MusicPlayerFrame(song);
            player.setVisible(true);
            player.setLocationRelativeTo(this);
        }
    }//GEN-LAST:event_lyPlayBActionPerformed

    private void lyDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lyDeleteActionPerformed
        if (lytable.getSelectedRow() != -1) {
            int option = JOptionPane.showConfirmDialog(this, "Do you want to delete the song: " + lySongs.get(lytable.getSelectedRow()).getTitle(), "Confirm", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (option == JOptionPane.YES_OPTION) {
                lySongs.remove(lytable.getSelectedRow());
            }
        }
        filllyTable(lySongs);
    }//GEN-LAST:event_lyDeleteActionPerformed

    private void lyricBottonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lyricBottonActionPerformed
        homeTab.setVisible(false);
        favTab.setVisible(false);
        insTab.setVisible(false);
        lyTab.setVisible(true);
        aboutTab.setVisible(false);
        filllyTable(lySongs);
    }//GEN-LAST:event_lyricBottonActionPerformed

    private void aboutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutButtonActionPerformed
        homeTab.setVisible(false);
        favTab.setVisible(false);
        insTab.setVisible(false);
        lyTab.setVisible(false);
        aboutTab.setVisible(true);
    }//GEN-LAST:event_aboutButtonActionPerformed

    private void insSearchTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insSearchTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_insSearchTextActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton aboutButton;
    private javax.swing.JPanel aboutTab;
    private javax.swing.JButton addSongB;
    private javax.swing.JButton addSongB1;
    private javax.swing.JButton deleteSongB;
    private javax.swing.JButton deleteSongB1;
    private javax.swing.JPanel favTab;
    private javax.swing.JTable favtable;
    private javax.swing.JButton homeButton;
    private javax.swing.JPanel homeTab;
    private javax.swing.JButton insDelete;
    private javax.swing.JButton insPlayB;
    private javax.swing.JButton insRefesh;
    private javax.swing.JPanel insSearch;
    private javax.swing.JButton insSearchButton;
    private javax.swing.JTextField insSearchText;
    private javax.swing.JPanel insTab;
    private javax.swing.JTable insTable;
    private javax.swing.JButton instrumentmusicBotton;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JButton lyDelete;
    private javax.swing.JButton lyPlayB;
    private javax.swing.JButton lyRefesh;
    private javax.swing.JPanel lySearch;
    private javax.swing.JButton lySearchB;
    private javax.swing.JTextField lySearchT;
    private javax.swing.JPanel lyTab;
    private javax.swing.JButton lyricBotton;
    private javax.swing.JTable lytable;
    private javax.swing.JPanel menu;
    private javax.swing.JTextField songField;
    private javax.swing.JTextField songField1;
    private javax.swing.JTable songList;
    private javax.swing.JButton songPlayB;
    private javax.swing.JButton songPlayB1;
    private javax.swing.JPanel songSearch;
    private javax.swing.JPanel songSearch1;
    private javax.swing.JButton songSearchButton;
    private javax.swing.JButton songSearchButton1;
    private javax.swing.JLabel title;
    // End of variables declaration//GEN-END:variables

    private void classify() {
        for (MusicTrack song : songs) {
            if (song.getType() == 0) {
                lySongs.add((LyricMusic) song);
            }
        }
        for (MusicTrack song : songs) {
            if (song.getType() == 1) {
                insSongs.add((InstrumentMusic) song);
            }
        }
    }

    private void loadFile() {
        String fileName = "List.data";
        try (ObjectInputStream ois = new ObjectInputStream(new FileInputStream(fileName))) {
            this.songs = (ArrayList<MusicTrack>) ois.readObject();
            ois.close();
        } catch (FileNotFoundException ex) {
            JOptionPane.showMessageDialog(this, "Error load file: " + ex.getMessage(), "Message", 1);
        } catch (IOException | ClassNotFoundException ex) {
            JOptionPane.showMessageDialog(this, "Error load file: " + ex.getMessage(), "Message", 1);
        }
    }

    private void saveToFile() {
        String fileName = "List.data";
        try (ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(fileName))) {
            oos.writeObject(songs);
            oos.close();
        } catch (FileNotFoundException ex) {
            JOptionPane.showMessageDialog(this, "Error save file: " + ex.getMessage(), "Message", 1);
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "Error save file: " + ex.getMessage(), "Message", 1);
        }
    }

    private void fillTable(ArrayList<MusicTrack> list) {
        DefaultTableModel model = (DefaultTableModel) songList.getModel();
        int rowCount = songList.getRowCount();
        for (int i = rowCount - 1; i >= 0; i--) {
            model.removeRow(i);
        }
        for (MusicTrack song : list) {
            Object[] row = new Object[]{song.getTitle(), song.getAuthor(), song.getGenre(), song.getYear()};
            model.addRow(row);
        }
    }

    private void fillfavTable(ArrayList<MusicTrack> list) {
        DefaultTableModel model = (DefaultTableModel) favtable.getModel();
        int rowCount = favtable.getRowCount();
        for (int i = rowCount - 1; i >= 0; i--) {
            model.removeRow(i);
        }
        for (MusicTrack song : list) {
            Object[] row = new Object[]{song.getTitle(), song.getAuthor(), song.getGenre(), song.getYear()};
            model.addRow(row);
        }
    }

    private void fillinsTable(ArrayList<InstrumentMusic> list) {
        DefaultTableModel model = (DefaultTableModel) insTable.getModel();
        int rowCount = insTable.getRowCount();
        for (int i = rowCount - 1; i >= 0; i--) {
            model.removeRow(i);
        }
        for (InstrumentMusic song : list) {
            Object[] row = new Object[]{song.getTitle(), song.getAuthor(), song.getGenre(), song.getYear(), song.getArtist(), song.getInstrument()};
            model.addRow(row);
        }
    }

    private void filllyTable(ArrayList<LyricMusic> list) {
        DefaultTableModel model = (DefaultTableModel) lytable.getModel();
        int rowCount = lytable.getRowCount();
        for (int i = rowCount - 1; i >= 0; i--) {
            model.removeRow(i);
        }
        for (LyricMusic song : list) {
            Object[] row = new Object[]{song.getTitle(), song.getAuthor(), song.getGenre(), song.getYear(), song.getSinger()};
            model.addRow(row);
        }
    }

    private ArrayList<MusicTrack> searchSong(String searchtext) {
        ArrayList<MusicTrack> result = new ArrayList<>();
        for (MusicTrack song : songs) {
            if (song.getTitle().contains(searchtext)) {
                result.add(song);
            } else if (song.getAuthor().contains(searchtext)) {
                result.add(song);
            } else if (song.getGenre().contains(searchtext)) {
                result.add(song);
            } else if (Integer.toString(song.getYear()).contains(searchtext)) {
                result.add(song);
            }
        }
        return result;
    }

    private ArrayList<InstrumentMusic> searchInsSong(String searchtext) {
        ArrayList<InstrumentMusic> result = new ArrayList<>();
        for (InstrumentMusic song : insSongs) {
            if (song.getTitle().contains(searchtext)) {
                result.add(song);
            } else if (song.getAuthor().contains(searchtext)) {
                result.add(song);
            } else if (song.getGenre().contains(searchtext)) {
                result.add(song);
            } else if (Integer.toString(song.getYear()).contains(searchtext)) {
                result.add(song);
            } else if (song.getArtist().contains(searchtext)) {
                result.add(song);
            } else if (song.getInstrument().contains(searchtext)) {
                result.add(song);
            }
        }
        return result;
    }

    private ArrayList<LyricMusic> searchLySong(String searchtext) {
        ArrayList<LyricMusic> result = new ArrayList<>();
        for (LyricMusic song : lySongs) {
            if (song.getTitle().contains(searchtext)) {
                result.add(song);
            } else if (song.getAuthor().contains(searchtext)) {
                result.add(song);
            } else if (song.getGenre().contains(searchtext)) {
                result.add(song);
            } else if (Integer.toString(song.getYear()).contains(searchtext)) {
                result.add(song);
            } else if (song.getSinger().contains(searchtext)) {
                result.add(song);
            }
        }

        return result;

    }

}
